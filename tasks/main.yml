---
- name: Import tasks installing distrobox.
  ansible.builtin.import_tasks: install/main.yml

- name: Get list of existing containers.
  become: true
  become_user: "{{ distrobox_user }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      distrobox list | awk '{print $3}' | grep '^{{ distrobox_create_name }}$'
  register: distrobox_list
  failed_when: false
  changed_when: false

- name: Ensure that container home directory exists.
  become: true
  ansible.builtin.file:
    path: "{{ distrobox_create_home }}"
    state: directory
    mode: "0755"
    owner: "{{ distrobox_user }}"
    group: "{{ distrobox_user }}"

- name: Ensure container has been created.
  become: true
  become_user: "{{ distrobox_user }}"
  when: distrobox_list.stdout == ""
  block:
    - name: Include variables for image family.
      ansible.builtin.include_vars: "vars/archlinux.yml"
      when: distrobox_create_image_name == 'archlinux'

    - name: Create a distrobox container.
      ansible.builtin.command:
        cmd: >
          distrobox create --yes
            --name {{ distrobox_create_name }}
            --image {{ distrobox_create_image_name }}:{{ distrobox_create_image_tag }}
            --home {{ distrobox_create_home }}
            --additional-packages "{{ distrobox_create_additional_packages }}"
            {{ distrobox_create_extra_args }}
      changed_when: false

    - name: Enter container to perform initial setup.
      ansible.builtin.command:
        cmd: distrobox enter {{ distrobox_create_name }} -- sh -c exit
      changed_when: true

- name: Ensure systemd unit is generated and enabled for container {{ distrobox_create_name }}.
  become: true
  become_user: "{{ distrobox_user }}"
  block:
    - name: Ensure systemd unit is generated for {{ distrobox_create_name }}.
      containers.podman.podman_generate_systemd:
        name: "{{ distrobox_create_name }}"
        dest: /home/{{ distrobox_user }}/.config/systemd/user/

    - name: Ensure systemd service is enabled for {{ distrobox_create_name }}.
      ansible.builtin.systemd:
        name: container-{{ distrobox_create_name }}
        daemon_reload: true
        enabled: "{{ distrobox_systemd_enabled }}"
        scope: user
